# frozen_string_literal: true
OBJECTS = %w(
  cluster.o
  cpuid.o
  debug.o
  dispatch.o
  dma.o
  elf.o
  gdt.o
  idt.o
  init.o
  irq.o
  irq_handlers.o
  limits.o
  main.o
  memory.o
  memory_global.o
  memory_physical.o
  memory_virtual.o
  multiboot.o
  mutex.o
  port.o
  process.o
  string.o
  system_calls-auto.o
  system_calls.o
  thread.o
  time.o
  timer.o
  trap.o
  wrapper.o
  compiler_rt/udivdi3.o
  compiler_rt/umoddi3.o
).freeze

OUTPUT = 'libstorm_x86.a'.freeze

# TODO: Would like to use STORM_GENERIC_LIB, but for whatever reason it is not available in this context.
GENERIC_OUTPUT = '../generic/libstorm_generic.a'.freeze

KERNEL_OUTPUT = 'storm'.freeze
LDFLAGS = '-nostdlib -Wl,-T,kernel.ld -m32'.freeze

task default: [:banner, :prepare, :storm] + OBJECTS

task :banner do
  print 'Compiling '.bold
  print 'storm/x86'.cyan.bold
  puts '...'

  print '    '
end

task :install do
  sh "#{INSTALL_COMMAND} #{KERNEL_OUTPUT} #{INSTALL_ROOT}/#{KERNEL_OUTPUT}"
  puts "    Installed #{KERNEL_OUTPUT} in #{INSTALL_ROOT}".gray
end

task prepare: ['wrapper.c', 'system_calls-auto.c']

# TODO: I guess the header files should be listed here also.
file 'wrapper.c' => 'system_calls.rb' do |t|
  script = t.prerequisites.first
  print((script + ' ').cyan)
  sh './' + script
end

file 'system_calls-auto.c' => 'system_calls.rb' do |t|
  script = t.prerequisites.first
  print((script + ' ').cyan)
  sh './' + script
end

file KERNEL_OUTPUT => [OUTPUT, GENERIC_OUTPUT] do |t|
  begin
    puts '    Linking...'.blue.bold

    # It's crazy, but we actually have to specify the OUTPUT twice here (since ia32 has references to the generic lib and
    # the generic lib has references to ia32... We could try to get rid of that eventually.)
    command = "#{CC} -o #{t.name} #{OUTPUT} #{GENERIC_OUTPUT} #{OUTPUT} #{LDFLAGS}"
    sh command
  rescue
    puts "Error linking kernel. Full command line was: #{command}"
    raise
  end
end

load '../storm.rake'
